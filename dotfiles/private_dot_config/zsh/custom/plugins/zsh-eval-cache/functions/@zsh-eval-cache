#!/usr/bin/env zsh
# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim: ft=zsh sw=2 ts=2 et

builtin emulate -L zsh ${=${options[xtrace]:#off}:+-o xtrace}
builtin setopt extended_glob typeset_silent no_short_loops rc_quotes no_auto_pushd local_options

typeset -gA ZEC
typeset -i ret=0
typeset -a input_array=( "$@" )
ZEC[COMMAND]=$(basename "$1" | awk '{print $1}')

ZEC[CACHE_DIR__${ZEC[COMMAND]}]=${ZEC[CACHE_DIR_BASE]}/${ZEC[COMMAND]}
ZEC[DISABLED]=${ZEC[DISABLED]:-0}
ZEC[DEBUG]=${ZEC[DEBUG]:-0}
ZEC[MAX]=${ZEC[MAX]:-1000}

# ZEC[CACHE_DIR__${ZEC[COMMAND]}]=${~ZEC[CACHE_DIR__${ZEC[COMMAND]}]}
[[ -d ${ZEC[CACHE_DIR__${ZEC[COMMAND]}]} ]] || command mkdir -p ${ZEC[CACHE_DIR__${ZEC[COMMAND]}]} &> /dev/null

if (( $+commands[md5] )); then
  ZEC[MD5_HASH__${ZEC[COMMAND]}]=$(md5 <<< $input_array)
elif (( $+commands[md5sum] )); then
  ZEC[MD5_HASH__${ZEC[COMMAND]}]=$(md5sum <<< $input_array | awk '{ print $1 }')
else
  ZEC[MD5_HASH__${ZEC[COMMAND]}]="no hash"
fi

ZEC[MD5_HASH]=${ZEC[MD5_HASH__${ZEC[COMMAND]}]}

ZEC[CACHE__${ZEC[COMMAND]}]=${ZEC[CACHE__${ZEC[COMMAND]}]:-${ZEC[CACHE_DIR__${ZEC[COMMAND]}]}/${ZEC[MD5_HASH]}.zsh}
ZEC[COUNT__${ZEC[COMMAND]}]=${ZEC[COUNT__${ZEC[COMMAND]}]:-${ZEC[CACHE_DIR__${ZEC[COMMAND]}]}/${ZEC[MD5_HASH]}.txt}

# ???????

if (( ZEC[DISABLED] )); then
  (( ZEC[DEBUG] )) && builtin print -Pr "@zsh-eval-cache: disabled"
  eval "$( ${(@)input_array} )"; ret=$?
elif [[ -s ${ZEC[CACHE__${ZEC[COMMAND]}]} ]]; then
  [[ -f $ZEC[COUNT__${ZEC[COMMAND]}] ]] || { builtin print 1 > ${ZEC[COUNT__${ZEC[COMMAND]}]}; } 2> /dev/null

  typeset count=$(<${ZEC[COUNT__${ZEC[COMMAND]}]})
  if [[ $count =~ ^[0-9]+$ ]]; then
    (( count++ )) && { builtin print $count > ${ZEC[COUNT__${ZEC[COMMAND]}]}; } 2> /dev/null
    (( ZEC[DEBUG] )) && builtin print -Pr "@zsh-eval-cache: ${ZEC[COMMAND]} hit $count"
  else
    builtin print -Pr "@zsh-eval-cache: failed to get cache count for ${ZEC[COMMAND]}"
  fi

  builtin source ${ZEC[CACHE__${ZEC[COMMAND]}]}; ret=$?
else
  [[ -f ${ZEC[COUNT__${ZEC[COMMAND]}]} ]] || { builtin print 1 > ${ZEC[COUNT__${ZEC[COMMAND]}]}; } 2> /dev/null

  (( ZEC[DEBUG] )) && builtin print -Pr "@zsh-eval-cache: ${ZEC[COMMAND]} miss"

  ${(@)input_array} >! ${ZEC[CACHE__${ZEC[COMMAND]}]} && zcompile -U ${ZEC[CACHE__${ZEC[COMMAND]}]} && builtin source ${ZEC[CACHE__${ZEC[COMMAND]}]}; ret=$?
fi

(( count > ZEC[MAX] )) && command rm -rf ${ZEC[CACHE_DIR__${ZEC[COMMAND]}]} &> /dev/null

(( ret )) && builtin print -Pr "@zsh-eval-cache: failed to initialize ${ZEC[COMMAND]}" >&2

return $ret
